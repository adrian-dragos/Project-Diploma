// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230524093435_Add-Instructor-Location")]
    partial class AddInstructorLocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Authorization.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Policy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(4238), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "SeeAllUsers"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(4238), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "UpdateInstructorProfile"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(4238), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "UpdateUserProfile"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.PolicyRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyRole");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PolicyId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(9654), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PolicyId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(9654), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PolicyId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(9654), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 3
                        },
                        new
                        {
                            RoleId = 3,
                            PolicyId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(9654), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 454, DateTimeKind.Unspecified).AddTicks(3639), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 454, DateTimeKind.Unspecified).AddTicks(3639), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "Student"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 454, DateTimeKind.Unspecified).AddTicks(3639), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Name = "Instructor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarGear")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarGear = 1,
                            Color = "purple",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Bugatti",
                            Model = "Mustang",
                            RegistrationNumber = "TM 430 YQX",
                            Vin = "7TL35X5PDDZY39623",
                            Year = new DateTime(2019, 6, 4, 10, 17, 15, 710, DateTimeKind.Local).AddTicks(3581)
                        },
                        new
                        {
                            Id = 2,
                            CarGear = 2,
                            Color = "green",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Smart",
                            Model = "Civic",
                            RegistrationNumber = "TM 944 UJR",
                            Vin = "XKB836IAYXP949127",
                            Year = new DateTime(2018, 7, 2, 5, 11, 53, 485, DateTimeKind.Local).AddTicks(2324)
                        },
                        new
                        {
                            Id = 3,
                            CarGear = 1,
                            Color = "green",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Cadillac",
                            Model = "A8",
                            RegistrationNumber = "TM 961 VRA",
                            Vin = "0U1A92LC6KEL64578",
                            Year = new DateTime(2019, 1, 4, 15, 36, 32, 889, DateTimeKind.Local).AddTicks(6939)
                        },
                        new
                        {
                            Id = 4,
                            CarGear = 1,
                            Color = "purple",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Bugatti",
                            Model = "Prius",
                            RegistrationNumber = "TM 208 JGC",
                            Vin = "7G6E7FZQT4F822237",
                            Year = new DateTime(2018, 5, 28, 1, 10, 16, 31, DateTimeKind.Local).AddTicks(9917)
                        },
                        new
                        {
                            Id = 5,
                            CarGear = 1,
                            Color = "blue",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Porsche",
                            Model = "911",
                            RegistrationNumber = "TM 117 OKU",
                            Vin = "PHDC6CEV81BS91672",
                            Year = new DateTime(2021, 1, 29, 9, 8, 26, 597, DateTimeKind.Local).AddTicks(1731)
                        },
                        new
                        {
                            Id = 6,
                            CarGear = 2,
                            Color = "red",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Hyundai",
                            Model = "Taurus",
                            RegistrationNumber = "TM 654 SIZ",
                            Vin = "M41J0Q8EN9SP14212",
                            Year = new DateTime(2020, 3, 30, 19, 50, 17, 254, DateTimeKind.Local).AddTicks(3367)
                        },
                        new
                        {
                            Id = 7,
                            CarGear = 2,
                            Color = "yellow",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Dodge",
                            Model = "XC90",
                            RegistrationNumber = "TM 885 VRD",
                            Vin = "4DBC1C7AFRS137035",
                            Year = new DateTime(2018, 12, 6, 7, 0, 36, 373, DateTimeKind.Local).AddTicks(2867)
                        },
                        new
                        {
                            Id = 8,
                            CarGear = 1,
                            Color = "green",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Hyundai",
                            Model = "Element",
                            RegistrationNumber = "TM 833 BKH",
                            Vin = "UARCFYGD5VKN48345",
                            Year = new DateTime(2021, 2, 27, 17, 0, 47, 499, DateTimeKind.Local).AddTicks(8959)
                        },
                        new
                        {
                            Id = 9,
                            CarGear = 2,
                            Color = "blue",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Kia",
                            Model = "Cruze",
                            RegistrationNumber = "TM 884 IIX",
                            Vin = "HG9H4CPPOEMR62088",
                            Year = new DateTime(2020, 12, 16, 21, 41, 4, 468, DateTimeKind.Local).AddTicks(8833)
                        },
                        new
                        {
                            Id = 10,
                            CarGear = 2,
                            Color = "red",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Manufacturer = "Chevrolet",
                            Model = "Explorer",
                            RegistrationNumber = "TM 927 ESZ",
                            Vin = "ATK25E0B3WWY71897",
                            Year = new DateTime(2021, 3, 12, 6, 49, 44, 654, DateTimeKind.Local).AddTicks(8990)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Birthday")
                        .HasMaxLength(50)
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1974, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Celia_Davis@hotmail.com",
                            FirstName = "Celia",
                            LastName = "Davis",
                            Password = "test",
                            PhoneNumber = "+40 746 964 446",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Devin83@gmail.com",
                            FirstName = "Devin",
                            LastName = "Little",
                            Password = "test",
                            PhoneNumber = "+40 743 381 834",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1996, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Clifton_Okuneva@gmail.com",
                            FirstName = "Clifton",
                            LastName = "Okuneva",
                            Password = "test",
                            PhoneNumber = "+40 747 565 216",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1982, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Pauline_Daugherty@yahoo.com",
                            FirstName = "Pauline",
                            LastName = "Daugherty",
                            Password = "test",
                            PhoneNumber = "+40 742 478 065",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(1995, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Janie32@gmail.com",
                            FirstName = "Janie",
                            LastName = "Satterfield",
                            Password = "test",
                            PhoneNumber = "+40 747 590 444",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(1985, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Colin.Cronin@hotmail.com",
                            FirstName = "Colin",
                            LastName = "Cronin",
                            Password = "test",
                            PhoneNumber = "+40 743 983 542",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Birthday = new DateTime(1974, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Freddie.Stiedemann87@gmail.com",
                            FirstName = "Freddie",
                            LastName = "Stiedemann",
                            Password = "test",
                            PhoneNumber = "+40 747 730 492",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 8,
                            Birthday = new DateTime(1994, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Nick.Wilderman60@hotmail.com",
                            FirstName = "Nick",
                            LastName = "Wilderman",
                            Password = "test",
                            PhoneNumber = "+40 748 485 882",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 9,
                            Birthday = new DateTime(1989, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Tanya.Luettgen@hotmail.com",
                            FirstName = "Tanya",
                            LastName = "Luettgen",
                            Password = "test",
                            PhoneNumber = "+40 747 220 837",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            Birthday = new DateTime(1992, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 1, 11, 50, 43, 880, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            Email = "Donnie_Borer30@hotmail.com",
                            FirstName = "Donnie",
                            LastName = "Borer",
                            Password = "test",
                            PhoneNumber = "+40 742 590 793",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GearType")
                        .HasColumnType("int");

                    b.Property<int>("IdentityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 450, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            GearType = 1,
                            IdentityId = 4,
                            Location = "Strada Crișul 7"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 450, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            GearType = 1,
                            IdentityId = 8,
                            Location = "Strada Crișul 7"
                        });
                });

            modelBuilder.Entity("Domain.Entities.InstructorCar", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InstructorId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("InstructorCars");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            CarId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 450, DateTimeKind.Unspecified).AddTicks(7311), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 1
                        },
                        new
                        {
                            InstructorId = 1,
                            CarId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 450, DateTimeKind.Unspecified).AddTicks(7311), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 2
                        },
                        new
                        {
                            InstructorId = 2,
                            CarId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 12, 34, 34, 450, DateTimeKind.Unspecified).AddTicks(7311), new TimeSpan(0, 3, 0, 0, 0)),
                            CreatedBy = "System Migration",
                            Id = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LessonStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ReviewId")
                        .IsUnique()
                        .HasFilter("[ReviewId] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(2552), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            InstructorId = 1,
                            LessonStatus = 0,
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 25, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(2552), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            InstructorId = 2,
                            LessonStatus = 0,
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 25, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 452, DateTimeKind.Unspecified).AddTicks(2552), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            InstructorId = 1,
                            LessonStatus = 0,
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 25, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GearType")
                        .HasColumnType("int");

                    b.Property<int>("IdentityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 454, DateTimeKind.Unspecified).AddTicks(3949), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            GearType = 1,
                            IdentityId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 5, 24, 9, 34, 34, 454, DateTimeKind.Unspecified).AddTicks(3949), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "System Seeding",
                            GearType = 1,
                            IdentityId = 7
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.PolicyRole", b =>
                {
                    b.HasOne("Domain.Entities.Authorization.Policy", "Policy")
                        .WithMany("PolicyRoles")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authorization.Role", "Role")
                        .WithMany("PolicyRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.HasOne("Domain.Entities.Authorization.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Instructor", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("Domain.Entities.InstructorCar", b =>
                {
                    b.HasOne("Domain.Entities.Car", "Car")
                        .WithMany("InstructorCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Instructor", "Instructor")
                        .WithMany("InstructorCars")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.Instructor", "Instructor")
                        .WithMany("Lessons")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Review", "Review")
                        .WithOne("Lesson")
                        .HasForeignKey("Domain.Entities.Lesson", "ReviewId");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Lessons")
                        .HasForeignKey("StudentId");

                    b.Navigation("Instructor");

                    b.Navigation("Review");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Identity", "Identity")
                        .WithMany("Students")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Policy", b =>
                {
                    b.Navigation("PolicyRoles");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Role", b =>
                {
                    b.Navigation("PolicyRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Navigation("InstructorCars");
                });

            modelBuilder.Entity("Domain.Entities.Identity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.Instructor", b =>
                {
                    b.Navigation("InstructorCars");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Navigation("Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
